"""

Add Gaussian noise to density map morphologies of galaxies generated by code supplied by Kenji Bekki
By James Caldon under supervision of Kenji Bekki (2021)

"""

import numpy as np
RANDOM_SEED_ = 2021
rng = np.random.default_rng(RANDOM_SEED_)

def add_gaussian_noise(np_arr):
    shape = np_arr[0].shape
    def add_gaussian_noise_to_image(img):
        #print(img.shape)
        mean = 0
        sigma = rng.uniform(0.0001, 0.001)
        gaussian = rng.normal(mean, sigma, shape)
        return gaussian + img
    
    np_arr[:, :] = np.array(list(map(add_gaussian_noise_to_image, np_arr[:, :])))

def add_point_sources(np_arr):
    shape = np_arr[0].shape
    def add_point_sources_to_image(img):
        #print(img.shape)
        rand_arr = rng.integers(0, shape[0], (rng.integers(0, 10), 2)) # 5 random 2d coordinates
        img[rand_arr[:, 0], rand_arr[:, 1]] = np.minimum(img[rand_arr[:, 0], rand_arr[:, 1]] + 0.5, 1.0)
        return img
    
    np_arr[:, :] = np.array(list(map(add_point_sources_to_image, np_arr[:, :])))

def add_background_galaxies(np_arr):
    shape = np_arr[0].shape
    from scipy import signal
    def add_point_sources_to_image(img):
        number_of_points = rng.integers(0, 10, 1)[0]
        for rand_size in (rng.integers(1, 4, number_of_points) * 4 + 1):
            gauss = np.outer(signal.windows.gaussian(rand_size, rand_size/6),
                             signal.windows.gaussian(rand_size, rand_size/6)) * ((rng.random() / 2) + 0.5)
            #gauss = np.clip(gauss, 0, 1)
            rand_x = rng.integers(0, shape[0] - rand_size, number_of_points)[0]
            rand_y = rng.integers(0, shape[0] - rand_size, number_of_points)[0]
            
            slice_x = slice(rand_x, rand_x + rand_size)
            slice_y = slice(rand_y, rand_y + rand_size)

            img[slice_x, slice_y] = np.clip(img[slice_x, slice_y] + gauss, 0.0, 1.0)
        
        return img
    
    np_arr[:, :] = np.array(list(map(add_point_sources_to_image, np_arr[:, :])))



def gkern(kernlen=21, nsig=3):
    """Returns a 2D Gaussian kernel."""
    import scipy.stats as st
    
    x = np.linspace(-nsig, nsig, kernlen+1)
    kern1d = np.diff(st.norm.cdf(x))
    kern2d = np.outer(kern1d, kern1d)
    return kern2d/kern2d.sum()

def apply_gaussian_PSF(np_arr, sigma):
    shape = np_arr[0].shape
    from scipy import signal
    from scipy.ndimage.filters import gaussian_filter, convolve
    gf = gkern(21, 3) 
    #print(gf)
    def apply_gaussian_PSF_to_img(img):
        print(img[:, :, 0].shape)
        print(gf.shape)
        img[:, :] = convolve(img[:, :], gf)
        img[:, :] *= 1.0/img[:,:].max()
        return img
    np_arr[:, :] = np.array([gaussian_filter(img, sigma) for img in np_arr])