"""

Add Gaussian noise to density map morphologies of galaxies generated by code supplied by Kenji Bekki
By James Caldon under supervision of Kenji Bekki (2021)

"""

import numpy as np
RANDOM_SEED_ = 2021
rng = np.random.default_rng(RANDOM_SEED_)


def add_gaussian_noise(np_arr, noise_range=[0.01, 0.03]):
    mean = 0
    sigmas = rng.uniform(noise_range[0], noise_range[1], np_arr.shape[0])

    for i in range(np_arr.shape[0]):
        np_arr[i] = rng.normal(mean, sigmas[i], np_arr[i].shape) + np_arr[i] 


# def add_gaussian_noise(np_arr):
#     img_shape = np_arr[0].shape
#     mean = 0
#     sigmas = rng.uniform(0.0001, 0.001, np_arr.shape[0])

#     import sys
#     for i in range(np_arr.shape[0]):
#         np_arr[i] = rng.normal(mean, sigmas[i], np_arr[i].shape) + np_arr[i] 
#     #gaussian = np.array([rng.normal(mean, sigma, img_shape) for sigma in sigmas])
#     #print(sys.getsizeof(gaussian))
#     #np_arr = np_arr + gaussian

def add_point_sources(np_arr, count=100):
    import sys
    all_coords = tuple(np.hstack([np.vstack((np.full(randx, i), rng.choice(np_arr[i].shape[0], randx, replace=False), rng.choice(np_arr[i].shape[1], randx, replace=False))) for (i, randx) in zip(range(np_arr.shape[0]), rng.integers(0, count, np_arr.shape[0]))]))
    print(sys.getsizeof(all_coords))
    np_arr[all_coords] = np.clip(np_arr[all_coords] + 0.5, 0, 1)

def add_background_galaxies(np_arr):
    from scipy import signal
    for i in range(np_arr.shape[0]):
        number_of_points = rng.integers(0, 10, 1)[0]
        rand_sizes = rng.integers(1, 4, number_of_points) * 2 + 1
        for rand_size in rand_sizes:
            gauss = np.outer(signal.windows.gaussian(rand_size, rand_size/6), signal.windows.gaussian(rand_size, rand_size/6)) * ((rng.random() / 2) + 0.5)
            rand_x = rng.integers(0, np_arr[i].shape[0] - rand_size, number_of_points)[0]
            rand_y = rng.integers(0, np_arr[i].shape[1] - rand_size, number_of_points)[0]
            slice_x = slice(rand_x, rand_x + rand_size)
            slice_y = slice(rand_y, rand_y + rand_size)
            np_arr[i, slice_x, slice_y]= np.clip(np_arr[i, slice_x, slice_y] + gauss, 0.0, 1.0)
            
def add_background_galaxies_moffat(np_arr):
    from astropy.convolution import Moffat2DKernel
    def scale(arr):
        return (arr - np.min(arr)) / (np.max(arr) - np.min(arr))
    #size = 8 * alpha (radius) + 1
    for i in range(np_arr.shape[0]):
        number_of_points = rng.integers(0, 10, 1)[0]
        rand_alphas = rng.uniform(1, 3, number_of_points)
        rand_gammas = rng.uniform(1, 3, number_of_points)
        for alpha, gamma in zip(rand_alphas, rand_gammas):
            
            kern = scale(np.array(Moffat2DKernel(alpha, gamma)))
            size = kern.shape[0]
            rand_x = rng.integers(0, np_arr[i].shape[0] - size, number_of_points)[0]
            rand_y = rng.integers(0, np_arr[i].shape[1] - size, number_of_points)[0]
            slice_x = slice(rand_x, rand_x + size)
            slice_y = slice(rand_y, rand_y + size)
            np_arr[i, slice_x, slice_y]= np.clip(np_arr[i, slice_x, slice_y] + kern, 0.0, 1.0)

            
            
def apply_moffat_PSF(np_arr, alpha, beta):
    from astropy.convolution import Moffat2DKernel, convolve
    kern = Moffat2DKernel(alpha, beta)
    for i in range(np_arr.shape[0]):
        np_arr[i, :, :] = convolve(np_arr[i, :, :], kern)


def apply_gaussian_PSF(np_arr, sigma):
    from scipy.ndimage.filters import gaussian_filter
    for i in range(np_arr.shape[0]):
        gaussian_filter(np_arr[i, :, :], sigma, output=np_arr[i, :, :])
